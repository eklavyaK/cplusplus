Declration of function:
returnType functionName(parameter1, parameter2,...)
{
	function body;
	return val;      //if applicable
}

functions of the program are executed using call stack. where the last function called is excuted last and most recent function is excuted first
=======================================================================================================================================================================================


Arrays in c++:

declaration:
dataType name[size];              //unlike java c++ arrays doesn't have default values like 0 or null after declaration

=======================================================================================================================================================================================

In case of integer arrays in c++, if we don't initialize any index of the array then every index of the array remains empty (contains ramdom values especially). But as soon 
one or more indices are initialized the remaining indices are initiallized to 0. But this thing should be done at the declaration of the arrays itself, not in another line.
for ex:
``````````````````
int a[100];       //a{39078,983249872,72987342,98752098903,8732892....................} --------->contains random values
int a[1] = 0;     //a{39078,0,72987342,98752098903,8732892............................} --------->contains 0 at 1st index all other indices are random, because we didn't initialize
																				                //at the time of declaration
int b[100] = {1,2} //b{1,2,0,0,0,0,0,0,0,0,0,0...............} ---------->all other indices are initialized to zero
//to initialize all the elements to zero we do: int a[100]={0};

//in case of string arrays all other no index is initialized unless its initialized manually. Initially element at every index is ""
string s[100];     //s{"","","","","".....................} ----------> every element is initialized to ""
string st[100] = {"there"}          //s{"there","","","","",""................} --------->every other element is initialized ""
=======================================================================================================================================================================================

length of array is found by finding the size of array then dividing it by the size of one element.

for ex:
```
#include <iostream>
using namespace std;
int main() {
   int arr[5] = {4, 1, 8, 2, 9};
   int len = sizeof(arr)/sizeof(arr[0]);
   cout << "The length of the array is: " << len;
   return 0;
}
````
output: The length of the array is: 5
````
Another way is:
The value contained in *(&arr + 1) is the address after 5 elements in the array. 
The value contained in arr is the address of the starting element in array. So their subtraction results in the length of the array.
```````````````````
#include <iostream>
using namespace std;
int main() 
{
   int arr[5] = {4, 1, 8, 2, 9};
   int len = sizeof(arr)/sizeof(arr[0]);
   cout << "The length of the array is: " << len;
   return 0;
}
``````````````````
The length of the array is: 5
``````````````````
=======================================================================================================================================================================================
Smallest integer number in c++ is called INT_MIN  basically -infinity in simple terms;
Largest integer number in c++ is called INT_MAX  basically +infinity in simple terms;
INT_MAX, INT_MIN are present in #include <climits>

max(double, double) is used to print the largest of the two given numbers
min(double, double) is used to print the smallest of the two given numbers
max and min are std namespace

=======================================================================================================================================================================================
character array:

declaration:
char arr[n+1];

we always declare the size of the character array as n+1 where n is the number of characters we want in the array and one character extra as '\0' which marks the end of the array
characters after will also be stored in the array which can be printed only individually(through their index) and not collectively at once when array is printed
``````````````````````````````````
#include <iostream>
using namespace std;
int main(){
	char a[] = {'d','a','y','i','\0','t','u','\0'};
	char b[] = {'b','j','k','r','i','o'};
	char b1[] = {'d','a','y','\0','i','t','u'};
	cout<<a<<endl;                                //prints the array as string till first '\0' character
	cout<<b<<endl;                                //since we haven't used '\0' at last neither defined the size of the array it will print the elements of the previous arrays also
	cout<<b1<<endl;                               //prints the array as string till first \0' character
	//char c[100];
	//c[] = {'d','a','y','i','t','u','g','h','q'};
	char c[] = {'d','a','y','i','t','u','g','h','q'};
	char d[100] = {'d','a','y','i','t','u','g','h','q','\0'}; 
	char e[100] = {'d','a','y','i','t','\0','u','g','h','q'};
	cout<<c<<endl;                                //since we haven't used '\0' at last neither defined the size of the array it will print the elements of the previous arrays also
	cout<<d<<endl;                                //prints the array as string till first '\0' character
	cout<<d[9]<<endl;                             //prints \0 which is just placing the cursor on the next line
	cout<<e<<endl;                                //since we have defined the size it prints the array it doesn't print the elements of the previous array but can do it if we 
												  //use printf statement with %
	char f[5] = {'d','a','y','i','t'};
	char g[6];
	g[0] = 'a';
	g[1] = 'b';
	g[2] = 'h';
	g[3] = 'u';
	g[4] = 'k';
	g[5] = '\0';
	cout<<g<<endl;                                //prints g array as string 
	for(int i = 0; i<sizeof(a)/sizeof(a[0]); i++)
		cout<<a[i]<<endl;                         //can print every character of the array even after the \0 character because we printing each character individually using index
	return 0;
}
``````````````````````````````````````````
output:

dayi
bjkriodayi
day
dayitughqday
dayitughq

dayit
abhuk
d
a
y
i

t
u

```````````````````````````````````````````````````