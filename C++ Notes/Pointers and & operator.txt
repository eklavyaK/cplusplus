pointers are used to point to a the memory location of a variable;

pointers declared with a data type will point to the memory location of a variable with the same data type, i.e. it we cannot assign the memory location of a char variable to
a int pointer.

& operator is used to give the location of the variable in memory;

to declare more than one pointer in one line we do: int *x, *y, *z;          //this declares three pointers of int type

ex:-
````
int main()
{
	int a = 2343;
	int *ap;                //* operator in declaration represents that the variable is of type pointer
	ap = &a;
	char b = 'c';
	//ap = &b;            //throws error;
	cout<<*ap<<endl;      //the * operator command the compiler to go the the memory location stored in the pointer so it prints the value in the memory location
	cout<<ap<<endl;       //this prints the value stored in the variable ap which is just the memory location of the variable a
	cout<<a<<endl;        //prints the memory location
	cout<<&a<<endl;
	*ap = 5543;           //changes the value at the given memory location
	cout<<a<<endl;
	cout<<*ap<<endl;
	cout<<ap<<endl;
}
````
output: 
2343
0x61ff04
2343
0x61ff04
5543
5543
0x61ff04
`````
=======================================================================================================================================================================================
A pointer can behave like an array
``````````````````````````
int a = 10;
int*p = &a;
int b = 20;
cout<<p[0]<<" "<<p[1]<<" "<<p[2]<<endl;  //prints: 10 20 6422260              
```````````````````````````
6422260 is a garbage value
=======================================================================================================================================================================================
To make two variables point to the same location we store the reference of one which declared first to another which is of same type
ex:
#include <bits/stdc++.h>
using namespace std;
int main()
{
	int a = 10;
	cout<<a<<endl;
	int &b = a;    //variable b is of type same as a (int type) and it points to the same location as a;
	cout<<b<<endl;
	cout<<&a<<endl;
	cout<<&b<<endl;
	return 1;
}
/*Output:
10
10
0x61ff08
0x61ff08
*/
=======================================================================================================================================================================================
pointer of array variable gives the memory location of its first element
for ex:
````int main()
{
	int a[10]  = {10, 3,43,23,65,64,9,};
	
	cout<<*a<<endl;         //here variable 'a' is not a pointer but behaves similar to a pointer, but we cannot perform increment or decrement operations on this pointer
	cout<<a<<endl;
}
```````
output: 
10
0x61fee8
``````
=======================================================================================================================================================================================

pointer arithmetic:

we can perform ++, --, +, - Operations on a pointer. if a int type pointer(p) is pointing to a location 400 then on p++ the p will point to location 404 because the variable is of 
int type which takes 4 bytes the memory location of the next variable will be after 4 bytes.

similarly  on performing p-- the pointer will now point to 400 again
let's understand it with example:
`````````
int main()
{
    int arr[10] = {23,6,54,23,62,4};
	cout<<arr<<endl; 
	int *p; p = arr;            //p is a independent pointer which now points to the location 
	for(int i = 0; i<10; i++)
	{
		cout<<*p<<" ";
		cout<<p<<endl;
		p++;
	}
	for(int i = 0; i<10; i++)
	{
		cout<<*arr<<" ";         
		cout<<arr+i<<endl;       //since arr points to first element so (arr+i) points to the ith location from the first element
		//arr++;                 //throws error because arr is a constant pointer(which always points to the location of first element of array) and it's non modifiable.
	}
	p = &arr[0];
	for(int i = 0; i<10; i++)
	{
		cout<<*p<<" ";
		cout<<p<<endl;
		p++;
	}
}
```````````
output:

0x61fed8
23 0x61fed8
6 0x61fedc
54 0x61fee0
23 0x61fee4
62 0x61fee8
4 0x61feec
0 0x61fef0
0 0x61fef4
0 0x61fef8
0 0x61fefc
23 0x61fed8
23 0x61fedc
23 0x61fee0
23 0x61fee4
23 0x61fee8
23 0x61feec
23 0x61fef0
23 0x61fef4
23 0x61fef8
23 0x61fefc
23 0x61fed8
6 0x61fedc
54 0x61fee0
23 0x61fee4
62 0x61fee8
4 0x61feec
0 0x61fef0
0 0x61fef4
0 0x61fef8
0 0x61fefc
````````````
=======================================================================================================================================================================================
Note: The ++ or -- operators take precedence over the * operator, and the () operators take precedence over everything else(* or ++ or --).
Note: ++*p is same as ++(*p) because here ++ operator cannot take precedence over * because ++ operation is performed on *p not solely on p, here the value at pointed location is 
increased
 
but *p++ =/= (*p)++ rather *p++ == *(p++), here value of the pointer is incremented, now it will point to next location

ex:-
``````````
int main()
{
	int *p;
	int a = 100;
	int b = 200;
	int c = 300;
	p = &a;
	cout<<a<<endl;                     //prints the value stored in memory location assigned to a
	cout<<p++<<endl;                   // Pointer moves to the next int position (as if it was an array), but existing memory location is printed because postfix operator
	cout<<++p<<endl;                   // Pointer moves to the next int position (as if it was an array), next memory location is printed because prefix operator
	cout<<++*p<<endl;                  // The value pointed at by ptr is incremented
	cout<<++(*p)<<endl;                // The value pointed at by ptr is incremented
	cout<<++*(p)<<endl;                // The value pointed at by ptr is incremented
	cout<<*p++<<endl;                  // Pointer moves to the next int position (as if it was an array). But returns the old content
	cout<<(*p)++<<endl;                // The value pointed at by ptr is incremented
	cout<<*(p)++<<endl;                // Pointer moves to the next int position (as if it was an array). But returns the old content
	cout<<*++p<<endl;                  // Pointer moves to the next int position, and then get's accessed, with this code, segfault
	cout<<*(++p)<<endl;	               // Pointer moves to the next int position, and then get's accessed, with this code, segfault
	return 0;
}
```````````
output:

100            
0x61ff08       
0x61ff10
4201361
4201362
4201363
4201363
6422320
6422321
4199048
6422284
```````````
=======================================================================================================================================================================================
Actually as the program moves on, the variables are assigned the consecutive variables are assigned the consecutive memory locations. So if we change the above code by declaring
a few more variables even without performing any operations on them, the output of the above code will change drastically
````````````
int main()
{
	int *p;
	int a = 100;
	int b = 200;
	int c = 300;
	p = &a;
	cout<<a<<endl;
	cout<<p++<<endl;           //Memory location stored in pointer p is now changed to that of b but prints the existing memory location
	cout<<++p<<endl;           //Memory location stored in pointer p is now changed to that of b and prints the new memory location
	cout<<++*p<<endl;          //Value at *p is incremented and printed
	cout<<++(*p)<<endl;        //Value at *p is incremented and printed
	cout<<++*(p)<<endl;        //Value at *p is incremented and printed
	cout<<*p++<<endl;          //Memory location in pointer is shifted to next location but printes the value in existing memory location
	cout<<(*p)++<<endl;        //The value in memory location is incremented
	cout<<*(p)++<<endl;        //Memory location in pointer is shifted to next location but printes the value in existing memory location
	cout<<*++p<<endl;          //Memory location in pointer is shifted to next location and printes the value in new memory location
	cout<<*(++p)<<endl;	       //Memory location in pointer is shifted to next location and printes the value in new memory location
	return 0;
}
````````````
output:
100
0x61ff00
0x61ff08
301
302
303
303
200
201
6422320
6422352
`````````````
when we declare a array in c++ (like for ex: int arr[] = {3,3243,234,23111};) the variable arr behaves like a pointer and initially points to the first memory location of the array.
but it is not a independent pointer variable, it is a constant pointer which cannot be modified, so we cannot all the pointer operations on it, like we cannot perform normal increment or decrement operations on it.
if we declare another pointer variable of type int and assign it arr then it also points to the first element of the arr but it is an independent pointer variable and we can 
perform all the operations of pointer on it, like increment
=======================================================================================================================================================================================

Pointer of a pointer:
ex:-
````
int main()
{
    int a = 10;
	int *p;
	int **d;
	p = &a;
	d = &p;
	cout<<a<<endl;       //prints the value stored in the memory location of variable a
	cout<<p<<endl;       //prints the value stored in the memory location of the variable p: which is the memory location of the variable a
	cout<<*p<<endl;      //* operator commands the compiler to go the the memory location stored in p and then cout prints the value stored in that memory location
	cout<<d<<endl;       //prints the value stored in the memory location d: which is the memory location of the variable p
	cout<<*d<<endl;      //* operator commands the compiler to go the memory location stored in d: which  is the memory location of variable p
	cout<<**d<<endl;     //there are two * operators so, one of them commands the compiler to go the memory location stored in d and then next * operator commands the compiler 
	//to go to the memory location which is stored in p: which is the memory location of a
}
`````
output:
10
0x61ff08
10
0x61ff04
0x61ff08
10
`````
=======================================================================================================================================================================================
Pointers can be used for various purposes like for ex:-
we want a variable to be accessed in another function. As we know when we pass parameters to a function we only pass the values of the variables to the function  not the actual 
variables. But we can access the variables of calling function by passing the reference to the called function.

ex:-

```````
void pointers(int *a, int *b)
{
	//*a++;            //we shouldn't write this because ++ operator will take precedence over * and the value of memory location will change rather than value in the variable;
	//*b--;    
	(*a)++;
	(*b)--;
}
void nonpointers(int a, int b)
{
	a++;
	b--;
}
int main()
(
	int a = 234;
	int b = 983;
	cout<<a<<" "<<b<<endl;
	nonpointers(a, b);
	cout<<a<<" "<<b<<endl;
	pointers(&a,&b)
	cout<<a<<" "<<b<<endl;
}
``````````
output:

234 983
234 983
235 982	
``````````