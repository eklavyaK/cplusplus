{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"boilerplate": {
		"scope": "cpp",
		"prefix": "simple",
		"body": [
			"#include<bits/stdc++.h>",
			"#define mp make_pair",
			"#define mod2 998244353ll",
			"#define mod1 1000000007ll",
			"#define rapid_iostream ios_base::sync_with_stdio(0);cin.tie(0)",
			"#define removezeros(s) s.erase(0,s.find(\"1\")!=-1?s.find(\"1\"):s.length()-1)",
			"#define binary(n,k) bitset<k>(n).to_string()",
			"#define makeset(s,c,sizeofc) for(int i = 0; i<sizeofc; i++){s.emplace_back(c[i]);while(i+1<sizeofc && c[i+1]==c[i])i++;}",
			"#define print(n) cout<<n<<endl",
			"typedef long long ll;",
			"typedef long double ld;",
			"void Y(){std::cout<<\"YES\"<<std::endl;}",
			"void N(){std::cout<<\"NO\"<<std::endl;}",
			"using namespace std;",
			"",
			"int main(){",
			"\trapid_iostream;",
			"",
			"\t$0",
			"",
			"\treturn 0;",
			"}"
		],
		"description": "simple"
	}
}