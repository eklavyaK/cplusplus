{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gggg_gsievecpp",
		"body": [
			"/*from 1 to 100000 (1 lakh) there are 9592 prime numbers, these primes numbers can divide each and every composite number from 1 to\n10000000000 (10^10)*/\nvector<int> v; // this is the global array declared which will store all the primes from t to u (both included)\nint counter;   // this is the actual number of primes stored in the array a after sieve is called using limits\nint sieve(int t, int u){\n	if(t>u||u<2){\n		cout<<\"Check the order of the range limits and make sure range contains at least one prime number.\"<<endl;\n		return 0;\n	}\n	if(t<=1) t=2;\n	int range=(u-t+1);\n	vector<int> primes(range);\n	int c = 0;\n	for(int cnt=2; cnt<u; cnt++){\n		int start=pow(cnt, 2);\n		if(start>u) break;\n		if(start<t){\n			if (((float)t/cnt)==(t/cnt)) c=(t/cnt);\n			else c=(t/cnt)+1;\n			while(cnt*c<=u){\n				if(primes[cnt*c-t]!=1) primes[cnt*c-t]=1;\n				c++;\n			}\n		}\n		else{\n			c=cnt;\n			while(cnt*c<=u){\n				if(primes[cnt*c-t]!=1) primes[cnt*c-t]=1;\n				c++;\n			}\n		}\n	}\n	for(int i=t; i<=u; i++){\n		if(primes[i-t]!=1){\n			v.emplace_back(i);\n			counter++;\n		}\n	}\n	return 0;\n}",
			"void start_again(){",
			"	v.clear();counter=0;",
			"}",
		],
		"description": "gggg_sievecpp"
	}
}