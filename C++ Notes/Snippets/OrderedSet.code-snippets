{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gordered_gset",
		"body": [
			"/*",
			"********************************************************************************************************",
			"//paste this code snippet just below using namespace std to use ordered set;",
			"",
			"#include<ext/pb_ds/assoc_container.hpp>",
			"#include<ext/pb_ds/tree_policy.hpp>",
			"using namespace __gnu_pbds;",
			"typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;",
			"********************************************************************************************************",
			"//declaration:",
			"",
			"ordered_set st       --------> st is variable name",
			"--------------------------------------------------------------------------------------------------------",
			"//functions:",
			"",
			"st.insert(value)         --------> it inserts the value in the set",
			"*st.find_by_order(index) --------> it returns the ITERATOR pointing to the particular index",
			"st.order_of_key(value)   --------> it returns the number of elements strictly less than key in the set",
			"*st.upper_bound(val)     --------> it returns ITERATOR, functionality depends on type",
			"*st.lower_bound(val)     --------> it returns ITERATOR, functionality depends on type",
			"-------------------------------------------------------------------------------------------------------",
			"//types:",
			"",
			"less<int> --------> arranged in ascending order, no duplicates",
			"greater<int> --------> arranged in descending order, no duplicates",
			"less_equal<int> --------> arranged in ascending order, multiset",
			"greater_equal<int> --------> arranged in descending order, multiset",
			"-------------------------------------------------------------------------------------------------------",
			"*/",
		],
		"description": "gordered_gset"
	}
}